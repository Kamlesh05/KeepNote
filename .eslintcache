[{"C:\\reacttut\\keepnote\\src\\index.js":"1","C:\\reacttut\\keepnote\\src\\reportWebVitals.js":"2","C:\\reacttut\\keepnote\\src\\App.jsx":"3","C:\\reacttut\\keepnote\\src\\Header.jsx":"4","C:\\reacttut\\keepnote\\src\\Footer.jsx":"5","C:\\reacttut\\keepnote\\src\\Note.jsx":"6","C:\\reacttut\\keepnote\\src\\ShowNote.jsx":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":1329,"mtime":1612178642304,"results":"11","hashOfConfig":"9"},{"size":386,"mtime":1611863700272,"results":"12","hashOfConfig":"9"},{"size":234,"mtime":1611865927097,"results":"13","hashOfConfig":"9"},{"size":1467,"mtime":1612173961510,"results":"14","hashOfConfig":"9"},{"size":788,"mtime":1612123502860,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1x0ib8m",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\reacttut\\keepnote\\src\\index.js",[],["32","33"],"C:\\reacttut\\keepnote\\src\\reportWebVitals.js",[],"C:\\reacttut\\keepnote\\src\\App.jsx",[],"C:\\reacttut\\keepnote\\src\\Header.jsx",[],"C:\\reacttut\\keepnote\\src\\Footer.jsx",[],"C:\\reacttut\\keepnote\\src\\Note.jsx",["34","35"],"import React,{useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddBoxOutlinedIcon from '@material-ui/icons/AddBoxOutlined';\r\n\r\nexport default function Note(props) {\r\n  const [note, setNote] = useState({\r\n    title:'',\r\n    content:''\r\n  })\r\n\r\n  const [expand,SetExpand]=useState(false);\r\n\r\n  const fetch = (e)=>{\r\n    const {name,value}=e.target;\r\n\r\n    setNote((preval)=>{\r\n      return{\r\n        ...preval,\r\n        [name]:value\r\n      }\r\n    })\r\n  }\r\n\r\nconst addData = ()=>{\r\nif(note.title==''){\r\n  alert('Pleae add the title of your note.');\r\n}\r\nelse if(note.content == ''){\r\n  alert('Please add the content of your note.')\r\n}\r\nelse{\r\n  props.getDataFromNote(note);\r\n    setNote({ \r\n    title:'',\r\n    content:''});\r\n}\r\n}\r\n\r\nconst expandIt =()=>{\r\n  return SetExpand(true);\r\n}\r\n\r\n    return (\r\n        <div className=\"main col-md-10 mx-auto\">\r\n        <div>\r\n          <form className=\"note\">\r\n            { expand ?\r\n            <input name='title' value={note.title} onChange={fetch} type=\"text\" placeholder=\"Title\"  />\r\n            :null}\r\n            <textarea name='content' value={note.content} onChange={fetch} rows='4' cols='50' className=\"noteArea\" placeholder=\"Take a Note ...\" onClick={expandIt} />\r\n            {expand ?\r\n            <Button className=\"btnAdd\" onClick={addData}><AddBoxOutlinedIcon fontSize='large'/></Button>\r\n            : null}\r\n          \r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","C:\\reacttut\\keepnote\\src\\ShowNote.jsx",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":25,"column":14,"nodeType":"42","messageId":"43","endLine":25,"endColumn":16},{"ruleId":"40","severity":1,"message":"41","line":28,"column":22,"nodeType":"42","messageId":"43","endLine":28,"endColumn":24},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]